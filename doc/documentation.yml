openapi: "3.0.1"
info:
  version: "1.0.0"
  title: "ONG-OT157"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/v753/OT157Alkemy/1.0.0
  - url: "http://localhost:3000/"
tags:
- name: "Users"
  description: "Users endpoints"
- name: "Categories"
  description: "Get category names"
- name: "News"
  description: "News endpoints"
- name: "Activities"
  description: "Activities endpoints"

components:
  schemas:
    User:
      type: object
      required: ["firstname","lastname","password","email"]
      properties:
        id:
          type: integer
          readOnly: true
        firstname:
          type: string
          description: "User firstname"
        lastname:
          type: string
          description: "User lastname"
        email:
          type: string
          description: "User email"
        image:
          type: string
          description: "User image"
        password:
          type: string
          description: "User password"
        roleId:
          type: string
          description: "User roleId (1 to admin)"  
        created_at:
          type: string
          description: "User creation date"
        updated_at:
          type: string
          description: "User update date"
        deleted_at:
          type: string
          description: "User deletion date"
    UserCreationBody:
      type: object
      required: ["firstname","lastname","password","email"]
      properties:
        firstname:
          type: string
          description: "User firstname"
        lastname:
          type: string
          description: "User lastname"
        email:
          type: string
          description: "User email"
        image:
          type: string
          description: "User image"
        password:
          type: string
          description: "User password"
        roleId:
          type: string
          description: "User roleId (1 to admin)"
    UserLoginBody:
      type: object
      required: ["password","email"]
      properties:
        email:
          type: string
          description: "User email"
        password:
          type: string
          description: "User password"  
    Category:
      type: object
      required: ["name"]
      properties:
        id:
          type: integer
        name:
          type: string
          description: "Category name"
        description:
          type: string
          description: "Category description"
        image:
          type: string
          description: "Category image"
        created_at:
          type: string
          description: "Category creation date"
        updated_at:
          type: string
          description: "Category update date"
        deleted_at:
          type: string
          description: "Category deletion date"
    Activity:
      type: object
      required: ["name","content"]
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: "Activity name"
        content:
          type: string
          description: "Activity content"
        image:
          type: string
          description: "Activity image URL"
        created_at:
          type: string
          description: "Activity creation date"
        updated_at:
          type: string
          description: "Activity update date"
        deleted_at:
          type: string
          description: "Activity deletion date" 
    ActivityBody:
      type: object
      required: ["name","content"]
      properties:
        name:
          type: string
          description: "Activity name"
        content:
          type: string
          description: "Activity content"
        image:
          type: string
          description: "Activity image URL"
    News:
      type: object
      required: ["name", "content", "categoryId", "image"]
      properties:
        name:
          type: string
          description: "News title"
        content:
          type: string
          description: "News content"
        image:
          type: string
          description: "News image"
        categoryId:
          type: integer
          description: "News category id"
        created_at:
          type: string
          description: "News creation date"
        updated_at:
          type: string
          description: "News update date"
        deleted_at:
          type: string
          description: "News deletion date"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: token
security:
  - ApiKeyAuth: []
      
paths:
  /users:
    get:
      tags: 
      - "Users"
      summary: "Get all the users created"
      description: "get all the user created in the database"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: 
               $ref: "#/components/schemas/User"
              example:
                users:
                  - id: 20
                    firstName: "Usuario est√°ndar10"
                    lastName: "Demo"
                    email: "estandar10@test.com"
                    image: "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png"
                    roleId: 2
        '404':
          description: Bad request - Not Found
        '401':
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
              example:
                msg: Mensaje de error
                
        default:
          description: Unexpected error
  /users/{userID}:  
    delete:
      tags:
      - "Users"
      summary: "Delete User"
      description: "Delete user by ID"
      parameters:
      - name: "userID"
        in: "path"
        description: "User ID"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type:
                  string
                example:
                  msg: "User deleted"
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                type:
                  string
                example:
                  msg: "Token no valido"
        404:
          description: "Not found"
    patch:
      tags:
      - "Users"
      summary: "Update User"
      description: "Update user by ID"
      parameters:
      - name: "userID"
        in: "path"
        description: "User ID"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "User object that needs to be updated"
        content:
          application/json:
            schema:
              type: object
            example:
              firstName: "Fran"
              lastName: "Masell"
              email: "franmassell4523@gmail.com"
              image: 'sdadas'
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type:
                  object
                example:
                  message: "User updated successfully"
                  user:
                    id: "UserID"
                    firstName: "Updated firstname"
                    lastName:  "Updated lastname"
                    email:  "Updated EMAIL"
                    image:  "Updated image URL"
                    roleId:  "Updated roleId"
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                type:
                  string
                example:
                  msg: "Mensaje de error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                type:
                  string
                example:
                  message: "Mensaje de error"
  /register:
    post:
      tags: 
      - "Users"
      summary: "Create a new User"
      description: "Create a new user in the database"
      requestBody:
        description: "User object that needs to be created"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationBody"
            example:
              firstName: "David"
              lastName: "Vogel"
              email: "exampleSwagger@gmail.com"
              image: ''
              password: '123456'
              roleId: '1'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: 
               type: object
              example:
                msg: "Usuario Creado con exito!"
                user:
                  id: 24
                  firstName: "Name"
                  lastName: "Lastname"
                  email: "Email registered"
                  image: 'Url image'
                  password: "Encripted Password"
                  roleId: 'roleId (Admin = 1)'
                  updatedAt: '2022-04-26T18:49:28.659Z'
                  createdAt: '2022-04-26T18:49:28.659Z'
                token: "Autentication Token"
                
        '404':
          description: Bad request - Not Found
          content:
            application/json:
              schema: 
                type: object
              example:
                errors:
                  - value: ''
                    msg: "First name is required"
                    param: "firstName"
                    location: "body"
                  - value: ''
                    msg: "Password is required"
                    param: "password"
                    location: "body"
                  - value: "Email" 
                    msg: 'This email: EMAIL is already registered'
                    param: "Email"
                    location: "body"
        '403':
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
              example:
                msg: Mensaje de error
        default:
          description: Unexpected error
  /auth/login:
   post:
      tags: 
      - "Users"
      summary: "Login User"
      description: "Login a created user in the database"
      requestBody:
        description:  "User that needs to be loged"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginBody"
            example:
              email: "exampleSwagger@gmail.com"
              password: '123456'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: 
               type: object
              example:
                user:
                  id: "userId"
                  firstName: "UserFirstname"
                  lastName: "UserLastName"
                  email: "userEmail"
                  image: 'user URL'
                  password: "User encripted password"
                  roleId: "user rolId"
                  deletedAt: "DATE"
                  createdAt: "DATE"
                  updatedAt: "DATE"
                token: "Autentication Token"
        '404':
          description: Bad Request
          content:
            application/json:
              schema: 
                type: object
              example:
                msg: Mensaje de error
        '403':
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
              example:
                msg: Mensaje de error
        default:
          description: Unexpected error
  /auth/me:
   get:
      tags: 
      - "Users"
      summary: "Logged User"
      description: "User logged in the database"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: 
               type: object
              example:
                userAuth:
                  id: "UserId"
                  firstName: "User firstname"
                  lastName: "User lastname"
                  email: "User EMAIL"
                  image: "User URL"
                  password: "User encripted password"
                  roleId: "User roleId"
                  deletedAt: "DATE"
                  createdAt: "DATE"
                  updatedAt: "DATE"
        '404':
          description: Bad Request
        '403':
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
              example:
                msg: Mensaje de error
        default:
          description: Unexpected error  
  /categories:
    get:
      tags:
      - "Categories"
      summary: "Find categories sorted by page"
      description: "Returns a list of ten category names sorted by page, starting with page 1 and returns 
        the previus and next page links according the page number you're currently on."
      parameters:
      - name: "page"
        in: "query"
        description: "Page number"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Category"
                example:
                - previusPage: "http://localhost:3000/categories?page=1"
                  nextPage: "http://localhost:3000/categories?page=2"
                - name: "Category 1"
                - name: "Category 2"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
    post:
      tags:
      - "Categories"
      summary: "Create category"
      description: "Creates a new category"
      requestBody:
        description: "Category object that needs to be added"
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: "Category name"
                description:
                  type: string
                  description: "Category description"
                image:
                  type: string
                  description: "Category image"
        required: true
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
  /categories/{categoryId}:
    get:
      tags:
      - "Categories"
      summary: "Find category by id"
      description: "Returns a category by id"
      
      parameters:
      - name: "categoryId"
        in: "path"
        description: "Category id"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Category"
                example:
                - id: 1
                  name: "Category 1"
                  description: "Category 1 description"
                  image: "http://localhost:3000/images/category1.jpg"
                  created_at: "2020-01-01 00:00:00"
                  updated_at: "2020-01-01 00:00:00"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
    put:
      tags:
      - "Categories"
      summary: "Update category"
      description: "Updates a category"
      
      parameters:
      - name: "categoryId"
        in: "path"
        description: "Category id"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "Category object that needs to be updated"
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: "Category name"
                description:
                  type: string
                  description: "Category description"
                image:
                  type: string
                  description: "Category image"
        required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Category"
                example:
                - id: 1
                  name: "Category 1"
                  description: "Category 1 description"
                  image: "http://localhost:3000/images/category1.jpg"
                  created_at: "2020-01-01 00:00:00"
                  updated_at: "2020-01-01 00:00:00"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
    delete:
      tags:
      - "Categories"
      summary: "Delete category"
      description: "Deletes a category"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "Category id"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                example:
                  message: "Category deleted"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
  /news:
    get:
      tags:
      - "News"
      summary: "Find news sorted by page"
      description: "Returns a list News sorted by page with a default page size of 10, starting with page 0 and returning 
        the currently page you are on, total of pages and previus/next page according to the page number you're currently on."
      
      parameters:
      - name: "page"
        in: "query"
        description: "Page number, default value is 0"
        required: false
        schema:
          type: "string"
      - name: "size"
        in: "query"
        description: "Page size, default value is 10"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/News"
                example:
                  example: {
                "status": "OK",
                "totalPages": "1",
                "page": "0",
                "nextPage": "1",
                "previousPage": "none",
                }
                  Content: [
                {
                "id": 2,
                "name": "Example News name",
                "content": "Example content",
                "image": "Example_image_route_or_url",
                "categoryId": 1,
                "createdAt": "Date",
                "updatedAt": "Date",
                Category: {
                 "id": 1,
                 "name": "Example category name",
                 "description": "Example category description",
                 "image": "Example_image_route_or_url",
                 "createdAt": "Date",
                 "updatedAt": "Date"
      }
    },
                  ]
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
    post:
      tags:
      - "News"
      summary: "Create News"
      description: "Creates a new post"
      requestBody:
        description: "News object that needs to be added"
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: "News name"
                content:
                  type: string
                  description: "News description"
                image:
                  type: string
                  description: "News image"
                categoryId:
                  type: integer
                  description: "News category id"
        required: true
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
                example:
                - status: "OK"
                  message: "News created!"
                - id: 1
                  name: "News 1 example name"
                  content: "News 1 example content"
                  image: "News 1 example image"
                  categoryId: "1"
                  created_at: "Date"
                  updated_at: "Date"
                  Category: {
                 "id": 1,
                 "name": "Example category name",
                 "description": "Example category description",
                 "image": "Example_image_route_or_url",
                 "createdAt": "Date",
                 "updatedAt": "Date"
      }
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
  /news/{Id}:
    get:
      tags:
      - "News"
      summary: "Find News by id"
      description: "Returns a News by id"
      
      parameters:
      - name: "Id"
        in: "path"
        description: "News id"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/News"
                example:
                - id: 1
                  name: "News 1 example name"
                  content: "News 1 example content"
                  image: "News 1 example image"
                  categoryId: "1"
                  created_at: "2020-01-01 00:00:00"
                  updated_at: "2020-01-01 00:00:00"
                  Category: {
                 "id": 1,
                 "name": "Example category name",
                 "description": "Example category description",
                 "image": "Example_image_route_or_url",
                 "createdAt": "Date",
                 "updatedAt": "Date"
      }
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
    put:
      tags:
      - "News"
      summary: "Update News"
      description: "Updates a News"
      
      parameters:
      - name: "Id"
        in: "path"
        description: "News id"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "News object that needs to be updated"
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: "News name"
                content:
                  type: string
                  description: "News content"
                image:
                  type: string
                  description: "News image"
                categoryId:
                  type: string
                  description: "News category id"
        required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/News"
                example:
                - status: "OK"
                  message: "News updated!"
                - id: 1
                  name: "News 1 example name"
                  content: "News 1 example content"
                  image: "News 1 example image"
                  categoryId: "1"
                  created_at: "Date"
                  updated_at: "Date"
                  Category: {
                 "id": 1,
                 "name": "Example category name",
                 "description": "Example category description",
                 "image": "Example_image_route_or_url",
                 "createdAt": "Date",
                 "updatedAt": "Date"
      }
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
    delete:
      tags:
      - "News"
      summary: "Delete News"
      description: "Deletes a News"
      parameters:
      - name: "Id"
        in: "path"
        description: "News id"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                example:
                  status: "OK"
                  message: "News deleted!"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
  /activities:
    description: "Routes to Create, create and get all the activities"
    get:
      tags:
      - "Activities"
      summary: "Get all the activities"
      description: "Returns all the Activities"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: 
               $ref: "#/components/schemas/Activity"
              example:
              - id: 1
                name: 'Activity name 1'
                content: 'Activity content 1'
                image: 'URL image 1'
                deletedAt: null|true|false
                createdAt: 'DATE'
                updatedAt: 'DATE'
              - id: 2
                name: 'Activity name 2'
                content: 'Activity content 2'
                image: 'URL image 2'
                deletedAt: null|true|false
                createdAt: 'DATE'
                updatedAt: 'DATE'
        '404':
          description: Bad request
        default:
          description: Unexpected error
    post:
      tags:
      - "Activities"
      summary: "Create a new activity"
      description: "Return the new activity"
      requestBody:
        description: "Activity object that needs to be created"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityBody"
            example:
              name: 'Created in swagger'
              content: 'Created in swagger'
              image: 'New Url image swagger'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: 
               $ref: "#/components/schemas/Activity"
              example:
                id: 11
                name: 'Created in swagger'
                content: 'Created in swagger'
                image: 'New Url image swagger'
                deletedAt: 'DATE'
                updatedAt: 'DATE'
                createdAt: 'DATE'
        '404':
          description: Bad request
        default:
          description: Unexpected error        
  /activities/{Id}:
    description: "Routes to update an activity"
    put:
      tags:
      - "Activities"
      summary: "Update activity by ID"
      description: "Return the updated activity"
      parameters:
      - name: "Id"
        in: "path"
        description: "Activity ID"
        required: true
        schema:
          type: string
      requestBody:
        description: "Activity object that needs to be updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityBody"
            example:
              name: 'Updated name in swagger'
              content: 'Updated content in swagger'
              image: 'Updated Url image swagger'  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: 
               $ref: "#/components/schemas/Activity"
              example:
                id: 11
                name: 'Updated name in swagger'
                content: 'Updated content in swagger'
                image: 'Updated Url image swagger'
                deletedAt: 'DATE'
                updatedAt: 'DATE'
                createdAt: 'DATE'
        '404':
          description: Bad request
        default:
          description: Unexpected error